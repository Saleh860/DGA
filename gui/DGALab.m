function varargout = DGALab(varargin)
    % DGALab MATLAB code for DGALab.fig
    %      DGALab, by itself, creates a new DGALab or raises the existing
    %      singleton*.
    %
    %      H = DGALab returns the handle to a new DGALab or the handle to
    %      the existing singleton*.
    %
    %      DGALab('CALLBACK',hObject,eventData,handles,...) calls the local
    %      function named CALLBACK in DGALab.M with the given input arguments.
    %
    %      DGALab('Property','Value',...) creates a new DGALab or raises the
    %      existing singleton*.  Starting from the left, property value pairs are
    %      applied to the GUI before DGALab_OpeningFcn gets called.  An
    %      unrecognized property name or invalid value makes property application
    %      stop.  All inputs are passed to DGALab_OpeningFcn via varargin.
    %
    %      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
    %      instance to run (singleton)".
    %
    % See also: GUIDE, GUIDATA, GUIHANDLES

    % Edit the above text to modify the response to help DGALab

    % Last Modified by GUIDE v2.5 21-Oct-2017 00:11:35

    % Begin initialization code - DO NOT EDIT
    gui_Singleton = 1;
    gui_State = struct('gui_Name',       mfilename, ...
                       'gui_Singleton',  gui_Singleton, ...
                       'gui_OpeningFcn', @DGALab_OpeningFcn, ...
                       'gui_OutputFcn',  @DGALab_OutputFcn, ...
                       'gui_LayoutFcn',  @DGALab_LayoutFcn, ...
                       'gui_Callback',   []);
    if nargin && ischar(varargin{1})
        gui_State.gui_Callback = str2func(varargin{1});
    end

    if nargout
        [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
    else
        gui_mainfcn(gui_State, varargin{:});
    end
    % End initialization code - DO NOT EDIT
end

% --- Executes just before DGALab is made visible.
function DGALab_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to DGALab (see VARARGIN)

    % Choose default command line output for DGALab
    handles.output = hObject;

    % Update handles structure
    guidata(hObject, handles);

    set(handles.DiagnosisTable, 'Visible', 'off');
    set(handles.AccuracyTable, 'Visible', 'off');
    set(handles.AccuracyGraph, 'Visible', 'off');

    %Read config file and fill in the methods list
    LoadDatasetList(handles);
    LoadMethodList(handles);
    
    LoadButtonImage(handles.GoButton, './res/run.png', 48, 160);
    %SetDefaultBackgroundColor(handles.GoButton);
end


% --- Outputs from this function are returned to the command line.
function varargout = DGALab_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

    % Get default command line output from handles structure
    varargout{1} = handles.output;
end

function LoadMethodList(handles)
    [methods,datasets] = Read_Config();
    set(handles.MethodList, 'String', methods(:,2));
    set(handles.MethodList, 'Max', length(methods));
    set(handles.MethodList, 'Value', []);
end


function LoadDatasetList(handles)
    [methods,datasets] = Read_Config();
    set(handles.lbDatasets, 'String', datasets(:,2));
    set(handles.lbDatasets, 'Max', length(datasets)); 
    set(handles.lbDatasets, 'Value', []);
end


function ratio1_Callback(hObject, eventdata, handles)

end

% --- Select All Methods
function SelectAllMethodsButton_Callback(hObject, eventdata, handles)
    methods = get(handles.MethodList, 'String');
    set(handles.MethodList, 'Value', 1:length(methods));
end

function SetDiagnosisTableHeader(handles, Header)
    set(handles.DiagnosisTable, 'ColumnName', Header);
end

function Header = GetDiagnosisTableHeader(handles)
    Header=get(handles.DiagnosisTable, 'ColumnName');
end

function SetDiagnosisTableData(handles, ratiosx)
    set(handles.DiagnosisTable, 'Data', ratiosx);
end

function data=GetDiagnosisTableData(handles)
    data =get(handles.DiagnosisTable, 'Data');
end

% --- Executes when selected object is changed in InputModeGroup.
function InputModeGroup_SelectionChangeFcn(hObject, eventdata, handles)
    ShowView(handles.optSinglePoint, handles.SinglePointPanel)
    ShowView(handles.optDataset, handles.DatasetsPanel)
end

function EnableAnalysisViews(handles, value)
    set(handles.AccuracyTabularView, 'Enable',value);
    set(handles.AccuracyGraphicalView, 'Enable',value);
    set(handles.selectedMethod, 'Enable', value);
end

% --- DGA for single point entered using textboxes
function SinglePointDiagnosis(handles)
    
    methods = Read_Config();
    selectedMethods = methods(get(handles.MethodList, 'Value'),:);
    Input = {'H2';'CH4';'C2H6'; 'C2H4';'C2H2';'CO';'CO2';'N2';'O2'};

    set(handles.RawDataView, 'Value', 1);
    EnableAnalysisViews(handles, 'off')
    set(handles.selectedMethod, 'String', '');

    ratios = NaN* ones(1,9);

    for ratio_i=1:9
        ratio = strcat('get(handles.ratio', num2str(ratio_i),', ''String'')');
        r = str2double(eval(ratio));
        if r>=0.0
            ratios(ratio_i) = r;
        end
    end

    results=DGAs_n(selectedMethods , ratios);
    
    symbolicResults=arrayfun(@(x) DGA_Diagnosis(x), ...
        results,'UniformOutput',false);

    FullColumns = find(~isnan(ratios(1,:)));

    selectedMethods = methods(get(handles.MethodList, 'Value'),2);
    SetDiagnosisTableHeader(handles, [Input(FullColumns)
         selectedMethods]);
     
    SetDiagnosisTableData(handles, ...
        [num2cell(ratios(:,FullColumns)) symbolicResults]);
        
    set(handles.RawDataView, 'Value', 1);
    
    ShowSelectedView(handles);

end

% --- Executes on button press in GoButton.
function RunDGA(handles)

    if length(get(handles.MethodList, 'Value'))==0
        uiwait(msgbox('You must first choose at least one DGA method'));
        return
    end
    
    % Single Point
    if isequal(get(handles.optSinglePoint, 'Value'),1)    
        
        SinglePointDiagnosis(handles);

    %Muliple Points
    else
        if length(get(handles.lbDatasets, 'Value'))==0
            uiwait(msgbox('You must first choose at least one dataset'));
            return
        end
        
        DatasetDiagnosis(handles);
        
    end
end

%Combine all selected datasets in one dataset
function [ratios, actual]=CombineSelectedDatasets(handles, selectedDatasets)
    ratios=[];
    actual=[];
    %assume actual data exists until it can't be found
    actual_exists=true;
    columns_found = 0;
    
    Input = {'H2';'CH4';'C2H6'; 'C2H4';'C2H2';'CO';'CO2';'N2';'O2'};        

    for iDataset=1: size(selectedDatasets,1)

        [data, txt, header] =xlsread(cell2mat(selectedDatasets(iDataset)));
        
        if size(data,1) > 0 
            ratios1 =  NaN * ones(size(data,1), length(Input));

            for gas_i=1:length(Input)
                col = find(strcmpi(Input{gas_i}, strtrim(header(1,...
                    cellfun(@(x) ischar(x), header(1,:)))))); 
                if(~isempty(col))
                    ratios1(:,gas_i)= data(:,col);
                    columns_found = columns_found + 1;
                end        
            end

            ACTcol = find(strcmpi('ACT',strtrim(header(1,...
                    cellfun(@(x) ischar(x), header(1,:)))))); 

            if(~isempty(ACTcol))
                actual1 = data(:,ACTcol);

            else
                actual_exists=false;
                actual1 = 7*ones([size(data,1) 1]);
            end
            if columns_found>0
                ratios=[ratios;ratios1];
                actual = [actual;actual1]; 
            else
                display(['Can''t recognize any data columns in the dataset file ' ...
                    char(selectedDatasets(iDataset))])
            end
        else
            display(['Sorry, can''t load dataset ' char(selectedDatasets(iDataset))])
        end 
    end
    
    set(handles.RawDataView, 'Value', 1);

    if actual_exists
        EnableAnalysisViews(handles, 'on')
    else
        EnableAnalysisViews(handles, 'off')
    end
end

function DatasetDiagnosis(handles)
    global DGA_histogram
    
    if size(get(handles.MethodList, 'Value'),1)==0
        uiwait(msgbox('You must first choose at least one dataset.'));
        return
    end

    [methods,datasets] = Read_Config();
    selectedMethods = methods(get(handles.MethodList, 'Value'),:);
    Input = {'H2';'CH4';'C2H6'; 'C2H4';'C2H2';'CO';'CO2';'N2';'O2'};        
    selectedDatasets = datasets(get(handles.lbDatasets, 'Value'),3);

    [ratios, actual]=CombineSelectedDatasets(handles, selectedDatasets);    

    if size(ratios,1)>0
        hProgressBar = waitbar(0, 'Preparing input datasets ...', ...
            'WindowStyle', 'modal');  

        [results, Canceled]=DGAs_n(selectedMethods , ratios, ...
             @(m,c,s) UpdateProgressSlider(hProgressBar, m, c, s));

        if ishandle(hProgressBar)
            delete(hProgressBar);
        end
        
        if ~Canceled
            symbolicResults=arrayfun(@(x) DGA_Diagnosis(x),results,'UniformOutput',false);

            symbolicActual = arrayfun(@(x) DGA_Diagnosis(x),actual,'UniformOutput',false);

            FullColumns = find(~isnan(ratios(1,:)));

            selectedMethods = methods(get(handles.MethodList, 'Value'),2);

            %If actual doesn't exist at all, hide the ACT column
            if all(actual==7)
                SetDiagnosisTableHeader(handles,[Input(FullColumns); selectedMethods]);
                SetDiagnosisTableData(handles, ...
                    [num2cell(ratios(:,FullColumns)) symbolicResults]);
            else
                SetDiagnosisTableHeader(handles,[Input(FullColumns); 'ACT'; selectedMethods]);
                SetDiagnosisTableData(handles, ...
                    [num2cell(ratios(:,FullColumns)) symbolicActual symbolicResults]);
            end

            DGA_histogram = AnalyzeResults(results, actual);

            axes(handles.AccuracyGraph);
            PlotAccuracyGraph(handles);

            set(handles.selectedMethod, 'String', selectedMethods);
            set(handles.selectedMethod, 'Value', 1);
            ShowSelectedView(handles);
            ShowSelectedMethodAnalysisResults(handles);
        else
            msgbox('Operation canceled!', 'WindowStyle', 'modal');
        end            
    else
        msgbox('Can''t find any data to analyse!', 'WindowStyle', 'modal');
    end
end
    
function PlotAccuracyGraph(handles)
    global DGA_histogram;    
    methods = Read_Config();
    
    selectedMethodCount = length(get(handles.MethodList, 'Value'));
    all = reshape(DGA_histogram(:,10),7,selectedMethodCount);

    bar(all);
    xlabel('Fault Type');
    ylabel('Accuracy %');

    grid on;

    set(gca,'XTickLabel', ...
        {'PD','D1','D2','T1','T2','T3','All'});

    ylim([0 100]);    

    legend( methods(get(handles.MethodList, 'Value'),2), ...
        'Location','eastoutside','Orientation','vertical', ...
        'Interpreter', 'none');
end

% --- helper function to show/hid an object based on the value of another    
function ShowView(hOption, hView)    
    V ={'off'; 'on'};
    set(hView, 'Visible', cell2mat(V(get(hOption, 'Value')+1))); 
end

% --- show the view corresponding to the selected result/analysis option 
function uipanel9_SelectionChangeFcn(hObject, eventdata, handles)
    ShowSelectedView(handles)
end

function ShowSelectedView(handles)
    ShowView(handles.RawDataView, handles.DiagnosisTable);
    ShowView(handles.AccuracyTabularView, handles.AccuracyTable);
    ShowView(handles.AccuracyGraphicalView, handles.AccuracyGraph);
end

% --- Display analysis results for the selected method
function selectedMethod_Callback(hObject, eventdata, handles)
    ShowSelectedMethodAnalysisResults(handles);
end

function H=MethodHistogram(index)
    %Histogram for all attempted methods
    global DGA_histogram;
    
    %The portion of the histogram corresponding to the selected method
    MethodPart= 7*(index-1)+1:7*index;
    
    H = DGA_histogram(MethodPart,:);
end

function ShowSelectedMethodAnalysisResults(handles)
    %The index of the method selected for display
    SelectedMethod = get(handles.selectedMethod, 'Value');
        
    %Display the accuracy table corresponding to the selected method
    set(handles.AccuracyTable, 'Data', MethodHistogram(SelectedMethod));
end

function pbEditMethods_Callback(hObject, eventdata, handles)
    h=Cfg_Methods;
    try
        uiwait(h);
    catch me
        display(me)
    end
    LoadMethodList(handles);
end

% --- Display Dataset configuration window
function pbEditDatasets_Callback(hObject, eventdata, handles)
    h=Cfg_Datasets;
    uiwait(h);
    LoadDatasetList(handles);
end

function pbSelectAllDatasets_Callback(hObject, eventdata, handles)  
    datasets = get(handles.lbDatasets, 'String');
    set(handles.lbDatasets, 'Value', 1:length(datasets));
end

% --- Executes on button press in pbExportView.
function ExportCurrentView(handles)

    warning('off', 'MATLAB:xlswrite:AddSheet');

    if get(handles.RawDataView, 'Value')
        ExportView(handles, 'DiagnosisTable.xlsx', ...
            {'*.xlsx', 'Excel Workbook 2007'}, ...
            @ExportDiagnosisTable);
    end
    
    if get(handles.AccuracyTabularView, 'Value')
        ExportView(handles, 'AccuracyTable.xlsx', ...
            {'*.xlsx', 'Excel Workbook 2007'}, ...
            @ExportAccuracyTable);
    end
    
    if get(handles.AccuracyGraphicalView, 'Value')
        ExportView(handles, 'AccuracyGraph.png', ...
            {'*.png', 'PNG formatted image'}, ...
            @ExportAccuracyGraph);
    end
    
    warning('on', 'MATLAB:xlswrite:AddSheet');
    
end

function ExportView(handles, filename, filter, exportFun)

    [filename,pathname]=uiputfile(filter,'Select Export File',filename);
    if ~isequal(filename,0) && ~isequal(pathname,0)
        rel_path = relativepath(pathname);
        if rel_path(end)~='\'
            rel_path = strcat(rel_path, '\');
        end
        filename = strcat(rel_path, filename);
        
        if exist(filename,'file') 
            delete(filename)
        end

        exportFun(handles, filename);

        msgbox(['View saved to ' filename], 'WindowStyle', 'modal');
    end
end

function ExportDiagnosisTable(handles, filename)
    colHeaders = GetDiagnosisTableHeader(handles); 

    data=GetDiagnosisTableData(handles);

    if ~iscell(data)
        data = num2cell(data);
    end


    Table = [colHeaders'
             data];

    xlswrite(filename, Table, 'Data');

end

function ExportAccuracyTable(handles, filename)
    global DGA_histogram
    columnHeaders = [' '; get(handles.AccuracyTable, 'ColumnName')]';
    rowHeaders = get(handles.AccuracyTable, 'RowName'); 

    selectedMethods = get(handles.selectedMethod, 'String');
    
    for iMethod = 1: length(selectedMethods)

        data=MethodHistogram(iMethod);

        if ~iscell(data)
            data = num2cell(data);
        end


        Table = [rowHeaders, data];
        if size(columnHeaders, 2) >= size(Table, 2)
            Header = columnHeaders(1,1:size(Table,2));
            Table = [Header;Table];
        end

        sheet = char(selectedMethods(iMethod));
        xlswrite(filename, Table, sheet);
    end

end

function ExportAccuracyGraph(handles, filename)

    h = figure;
    PlotAccuracyGraph(handles);
    xlabel('Fault Type', 'fontsize', 28);
    ylabel('Accuracy %', 'fontsize', 28);
    set(h, 'papersize', [16 12]);
    set(h, 'paperpositionmode','manual');
    set(h, 'paperorientation','portrait');
    set(h, 'paperunits','normalized');
    set(h, 'paperposition',[0.25 0.25 1.2 0.6]); 
    set(gca,'fontsize',20);

    print(h, filename ,'-dpng');
    close(h);

end

function Canceled=UpdateProgressSlider(handle, maximum, current, message)
    if isgraphics(handle)
        if nargin==4
            waitbar(current/maximum, handle, message);
            
        else
            waitbar(current/maximum, handle);
        end
        Canceled=false;
    else
        Canceled=true;
    end    
%    set(handle, 'Slider', [0.01; max(0.01, 100*(current/maximum)^6)]);
    drawnow
end


% --- Creates and returns a handle to the GUI figure. 
function h1 = DGALab_LayoutFcn(policy)
    % policy - create a new figure or use a singleton. 'new' or 'reuse'.

    persistent hsingleton;
    if strcmpi(policy, 'reuse') & ishandle(hsingleton)
        h1 = hsingleton;
        return;
    end
    %load DGALab.mat


    appdata = [];
    appdata.GUIDEOptions = struct(...
        'active_h', [], ...
        'taginfo', struct(...
        'figure', 2, ...
        'text', 19, ...
        'checkbox', 2, ...
        'uipanel', 13, ...
        'listbox', 3, ...
        'uitoolbar', 2, ...
        'uipushtool', 4, ...
        'edit', 15, ...
        'togglebutton', 3, ...
        'pushbutton', 10, ...
        'axes', 5, ...
        'uitoggletool', 2, ...
        'uitable', 3, ...
        'radiobutton', 10, ...
        'popupmenu', 2, ...
        'slider', 2), ...
        'override', 0, ...
        'release', 13, ...
        'resize', 'none', ...
        'accessibility', 'callback', ...
        'mfile', 1, ...
        'callbacks', 1, ...
        'singleton', 1, ...
        'syscolorfig', 1, ...
        'blocking', 0, ...
        'lastSavedFile', '.\gui\DGALab.m', ...
        'lastFilename', '.\gui\DGA_UI.fig');
    appdata.lastValidTag = 'figure1';
    appdata.SavedVisible = 'on';
%    appdata.GUIOnScreen = 1;
    appdata.FileMenuFcnLastExportedAsType = 5;
    appdata.GUIDELayoutEditor = [];
    appdata.initTags = struct(...
        'handle', [], ...
        'tag', 'figure1');

    h1 = figure(...
    'Units','characters',...
    'Color',[0.941176470588235 0.941176470588235 0.941176470588235],...
    'Colormap',[0 0 0.5625;0 0 0.625;0 0 0.6875;0 0 0.75;0 0 0.8125;0 0 0.875;0 0 0.9375;0 0 1;0 0.0625 1;0 0.125 1;0 0.1875 1;0 0.25 1;0 0.3125 1;0 0.375 1;0 0.4375 1;0 0.5 1;0 0.5625 1;0 0.625 1;0 0.6875 1;0 0.75 1;0 0.8125 1;0 0.875 1;0 0.9375 1;0 1 1;0.0625 1 1;0.125 1 0.9375;0.1875 1 0.875;0.25 1 0.8125;0.3125 1 0.75;0.375 1 0.6875;0.4375 1 0.625;0.5 1 0.5625;0.5625 1 0.5;0.625 1 0.4375;0.6875 1 0.375;0.75 1 0.3125;0.8125 1 0.25;0.875 1 0.1875;0.9375 1 0.125;1 1 0.0625;1 1 0;1 0.9375 0;1 0.875 0;1 0.8125 0;1 0.75 0;1 0.6875 0;1 0.625 0;1 0.5625 0;1 0.5 0;1 0.4375 0;1 0.375 0;1 0.3125 0;1 0.25 0;1 0.1875 0;1 0.125 0;1 0.0625 0;1 0 0;0.9375 0 0;0.875 0 0;0.8125 0 0;0.75 0 0;0.6875 0 0;0.625 0 0;0.5625 0 0],...
    'IntegerHandle','off',...
    'InvertHardcopy',get(0,'defaultfigureInvertHardcopy'),...
    'MenuBar','none',...
    'Name','DGALab',...
    'NumberTitle','off',...
    'PaperPosition',get(0,'defaultfigurePaperPosition'),...
    'Position',[103.8 22.1538461538462 210 39.3846153846154],...
    'Resize','off',...
    'HandleVisibility','callback',...
    'UserData',[],...
    'Tag','figure1',...
    'Visible','on',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'text1';

    h2 = uicontrol(...
    'Parent',h1,...
    'Units','characters',...
    'FontSize',14,...
    'FontWeight','bold',...
    'Position',[49.8 37.0769230769231 110.2 2.23076923076923],...
    'String','Dissolved Gas Analysis',...
    'Style','text',...
    'Tag','text1',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'DatasetsPanel';

    h3 = uipanel(...
    'Parent',h1,...
    'Units','characters',...
    'Title','Gas Ratios',...
    'Clipping','on',...
    'Position',[2 4.61538461538462 40.5 15],...
    'Tag','DatasetsPanel',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'lbDatasets';

    h4 = uicontrol(...
    'Parent',h3,...
    'Units','characters',...
    'BackgroundColor',[1 1 1],...
    'Max',4,...
    'Min',1,...
    'Position',[2 3.5 36 10],...
    'String',{  'Dataset1'; 'Dataset2'; 'Dataset3' },...
    'Style','listbox',...
    'Value',[1 2 3],...
    'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)SetDefaultBackgroundColor(hObject), appdata} ,...
    'Tag','lbDatasets');

    appdata = [];
    appdata.lastValidTag = 'pbEditDatasets';

    h5 = uicontrol(...
    'Parent',h3,...
    'Units','characters',...
    'Callback',@(hObject,eventdata)DGALab('pbEditDatasets_Callback',hObject,eventdata,guidata(hObject)),...
    'Position',[1.8 1 17 2],...
    'String','Configure ...',...
    'Tag','pbEditDatasets',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'pbSelectAllDatasets';

    h6 = uicontrol(...
    'Parent',h3,...
    'Units','characters',...
    'Callback',@(hObject,eventdata)DGALab('pbSelectAllDatasets_Callback',hObject,eventdata,guidata(hObject)),...
    'Position',[21 1 17 2],...
    'String','Select All',...
    'Tag','pbSelectAllDatasets',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'GoButton';

    h7 = uicontrol(...
    'Parent',h1,...
    'Units','characters',...
    'BackgroundColor',[1 1 1],...
    'Callback',@(hObject, eventData) DGALab('RunDGA',guidata(hObject)),...
    'FontSize',12,...
    'FontWeight','bold',...
    'Position',[3.2 0.846153846153846 38.4 3.84615384615385],...
    'String',blanks(0),...
    'TooltipString','Apply the selected methods to the selected data and display the results',...
    'Tag','GoButton',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'SinglePointPanel';

    h8 = uipanel(...
    'Parent',h1,...
    'Units','characters',...
    'Title','Single Point',...
    'Clipping','on',...
    'Position',[2 4.61538461538462 40.5 15],...
    'Visible','off',...
    'Tag','SinglePointPanel',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'text3';

    h9 = uicontrol(...
    'Parent',h8,...
    'Units','characters',...
    'Position',[2 11.8461538461538 10 1.15384615384615],...
    'String','H2',...
    'Style','text',...
    'Tag','text3',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'ratio1';

    h10 = uicontrol(...
    'Parent',h8,...
    'Units','characters',...
    'BackgroundColor',[1 1 1],...
    'Callback',@(hObject,eventdata)DGALab('ratio1_Callback',hObject,eventdata,guidata(hObject)),...
    'Position',[2 10 10 1.84615384615385],...
    'String','-1',...
    'Style','edit',...
    'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)SetDefaultBackgroundColor(hObject), appdata} ,...
    'Tag','ratio1');

    appdata = [];
    appdata.lastValidTag = 'text5';

    h11 = uicontrol(...
    'Parent',h8,...
    'Units','characters',...
    'Position',[14.5 11.8461538461538 10 1.15384615384615],...
    'String','CH4',...
    'Style','text',...
    'Tag','text5',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'ratio2';

    h12 = uicontrol(...
    'Parent',h8,...
    'Units','characters',...
    'BackgroundColor',[1 1 1],...
    'Callback',@(hObject,eventdata)DGALab('ratio1_Callback',hObject,eventdata,guidata(hObject)),...
    'Position',[14.5 10 10 1.84615384615385],...
    'String','-1',...
    'Style','edit',...
    'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)SetDefaultBackgroundColor(hObject), appdata} ,...
    'Tag','ratio2');

    appdata = [];
    appdata.lastValidTag = 'text6';

    h13 = uicontrol(...
    'Parent',h8,...
    'Units','characters',...
    'Position',[27 11.8461538461538 10 1.15384615384615],...
    'String','C2H6',...
    'Style','text',...
    'Tag','text6',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'ratio3';

    h14 = uicontrol(...
    'Parent',h8,...
    'Units','characters',...
    'BackgroundColor',[1 1 1],...
    'Callback',@(hObject,eventdata)DGALab('ratio1_Callback',hObject,eventdata,guidata(hObject)),...
    'Position',[27 10 10 1.84615384615385],...
    'String','-1',...
    'Style','edit',...
    'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)SetDefaultBackgroundColor(hObject), appdata} ,...
    'Tag','ratio3');

    appdata = [];
    appdata.lastValidTag = 'text10';

    h15 = uicontrol(...
    'Parent',h8,...
    'Units','characters',...
    'Position',[2 7.38461538461539 10 1.15384615384615],...
    'String','C2H4',...
    'Style','text',...
    'Tag','text10',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'ratio4';

    h16 = uicontrol(...
    'Parent',h8,...
    'Units','characters',...
    'BackgroundColor',[1 1 1],...
    'Callback',@(hObject,eventdata)DGALab('ratio1_Callback',hObject,eventdata,guidata(hObject)),...
    'Position',[2 5.53846153846154 10 1.84615384615385],...
    'String','-1',...
    'Style','edit',...
    'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)SetDefaultBackgroundColor(hObject), appdata} ,...
    'Tag','ratio4');

    appdata = [];
    appdata.lastValidTag = 'text11';

    h17 = uicontrol(...
    'Parent',h8,...
    'Units','characters',...
    'Position',[14.5 7.38461538461539 10 1.15384615384615],...
    'String','C2H2',...
    'Style','text',...
    'Tag','text11',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'ratio5';

    h18 = uicontrol(...
    'Parent',h8,...
    'Units','characters',...
    'BackgroundColor',[1 1 1],...
    'Callback',@(hObject,eventdata)DGALab('ratio1_Callback',hObject,eventdata,guidata(hObject)),...
    'Position',[14.5 5.53846153846154 10 1.84615384615385],...
    'String','-1',...
    'Style','edit',...
    'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)SetDefaultBackgroundColor(hObject), appdata} ,...
    'Tag','ratio5');

    appdata = [];
    appdata.lastValidTag = 'text12';

    h19 = uicontrol(...
    'Parent',h8,...
    'Units','characters',...
    'Position',[27 7.38461538461539 10 1.15384615384615],...
    'String','CO',...
    'Style','text',...
    'Tag','text12',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'ratio6';

    h20 = uicontrol(...
    'Parent',h8,...
    'Units','characters',...
    'BackgroundColor',[1 1 1],...
    'Callback',@(hObject,eventdata)DGALab('ratio1_Callback',hObject,eventdata,guidata(hObject)),...
    'Position',[27 5.53846153846154 10 1.84615384615385],...
    'String','-1',...
    'Style','edit',...
    'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)SetDefaultBackgroundColor(hObject), appdata} ,...
    'Tag','ratio6');

    appdata = [];
    appdata.lastValidTag = 'text13';

    h21 = uicontrol(...
    'Parent',h8,...
    'Units','characters',...
    'Position',[2 3.07692307692308 10 1.15384615384615],...
    'String','CO2',...
    'Style','text',...
    'Tag','text13',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'ratio7';

    h22 = uicontrol(...
    'Parent',h8,...
    'Units','characters',...
    'BackgroundColor',[1 1 1],...
    'Callback',@(hObject,eventdata)DGALab('ratio1_Callback',hObject,eventdata,guidata(hObject)),...
    'Position',[2 1.23076923076923 10 1.84615384615385],...
    'String','-1',...
    'Style','edit',...
    'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)SetDefaultBackgroundColor(hObject), appdata} ,...
    'Tag','ratio7');

    appdata = [];
    appdata.lastValidTag = 'text14';

    h23 = uicontrol(...
    'Parent',h8,...
    'Units','characters',...
    'Position',[14.5 3.07692307692308 10 1.15384615384615],...
    'String','N2',...
    'Style','text',...
    'Tag','text14',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'ratio8';

    h24 = uicontrol(...
    'Parent',h8,...
    'Units','characters',...
    'BackgroundColor',[1 1 1],...
    'Callback',@(hObject,eventdata)DGALab('ratio1_Callback',hObject,eventdata,guidata(hObject)),...
    'Position',[14.5 1.23076923076923 10 1.84615384615385],...
    'String','-1',...
    'Style','edit',...
    'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)SetDefaultBackgroundColor(hObject), appdata} ,...
    'Tag','ratio8');

    appdata = [];
    appdata.lastValidTag = 'text15';

    h25 = uicontrol(...
    'Parent',h8,...
    'Units','characters',...
    'Position',[27 3.07692307692308 10 1.15384615384615],...
    'String','O2',...
    'Style','text',...
    'Tag','text15',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'ratio9';

    h26 = uicontrol(...
    'Parent',h8,...
    'Units','characters',...
    'BackgroundColor',[1 1 1],...
    'Callback',@(hObject,eventdata)DGALab('ratio9_Callback',hObject,eventdata,guidata(hObject)),...
    'Position',[27 1.23076923076923 10 1.84615384615385],...
    'String','-1',...
    'Style','edit',...
    'Value',[],...
    'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)SetDefaultBackgroundColor(hObject), appdata} ,...
    'Tag','ratio9');

    appdata = [];
    appdata.lastValidTag = 'uipanel1';

    h27 = uipanel(...
    'Parent',h1,...
    'Units','characters',...
    'Title','Method',...
    'Clipping','on',...
    'Position',[2 23.6153846153846 40.5 14],...
    'Tag','uipanel1',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'MethodList';

    h28 = uicontrol(...
    'Parent',h27,...
    'Units','characters',...
    'BackgroundColor',[1 1 1],...
    'Max',4,...
    'Min',1,...
    'Position',[2 3.5 36 9],...
    'String',{  'Method1'; 'Method2'; 'Method3' },...
    'Style','listbox',...
    'TooltipString','Select one or more DGA methods to apply',...
    'Value',[1 2 3],...
    'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)SetDefaultBackgroundColor(hObject), appdata} ,...
    'Tag','MethodList');

    appdata = [];
    appdata.lastValidTag = 'SelectAllMethodsButton';

    h29 = uicontrol(...
    'Parent',h27,...
    'Units','characters',...
    'Callback',@(hObject,eventdata)DGALab('SelectAllMethodsButton_Callback',hObject,eventdata,guidata(hObject)),...
    'Position',[21 1 17 2],...
    'String','Select All',...
    'TooltipString','Apply all methods',...
    'Tag','SelectAllMethodsButton',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'pbEditMethods';

    h30 = uicontrol(...
    'Parent',h27,...
    'Units','characters',...
    'Callback',@(hObject,eventdata)DGALab('pbEditMethods_Callback',hObject,eventdata,guidata(hObject)),...
    'Position',[2 1 17 2],...
    'String','Configure ...',...
    'TooltipString','Add new methods / edit existing ones',...
    'Tag','pbEditMethods',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'uipanel2';

    h31 = uipanel(...
    'Parent',h1,...
    'Units','characters',...
    'UserData',[],...
    'Clipping','on',...
    'Position',[44 0.76923076923077 163.8 36],...
    'Tag','uipanel2',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'AccuracyGraph';

    h32 = axes(...
    'Parent',h31,...
    'Units','characters',...
    'Position',[12.6 4.76923076923077 143.2 23],...
    'CameraPosition',[0.5 0.5 9.16025403784439],...
    'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
    'Color',get(0,'defaultaxesColor'),...
    'ColorOrder',get(0,'defaultaxesColorOrder'),...
    'DrawMode','fast',...
    'LooseInset',[29.38 6.14307692307692 21.47 4.18846153846154],...
    'XColor',get(0,'defaultaxesXColor'),...
    'YColor',get(0,'defaultaxesYColor'),...
    'ZColor',get(0,'defaultaxesZColor'),...
    'Tag','AccuracyGraph',...
    'Visible','off',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    h33 = get(h32,'title');

    set(h33,...
    'Parent',h32,...
    'Units','data',...
    'FontUnits','points',...
    'BackgroundColor','none',...
    'Color',[0 0 0],...
    'DisplayName',blanks(0),...
    'EdgeColor','none',...
    'EraseMode','normal',...
    'FontAngle','normal',...
    'FontName','Helvetica',...
    'FontSize',10,...
    'FontWeight','normal',...
    'HorizontalAlignment','center',...
    'LineStyle','-',...
    'LineWidth',0.5,...
    'Margin',2,...
    'Position',[0.499301675977654 1.02173913043478 1.00005459937205],...
    'Rotation',0,...
    'String',blanks(0),...
    'Interpreter','none',...
    'VerticalAlignment','bottom',...
    'ButtonDownFcn',[],...
    'CreateFcn', {@local_CreateFcn, [], ''} ,...
    'DeleteFcn',[],...
    'BusyAction','queue',...
    'HandleVisibility','off',...
    'HitTest','on',...
    'Interruptible','on',...
    'SelectionHighlight','on',...
    'Tag',blanks(0),...
    'UserData',[],...
    'Visible','off',...
    'XLimInclude','on',...
    'YLimInclude','on',...
    'ZLimInclude','on',...
    'Clipping','off');

    h34 = get(h32,'xlabel');

    set(h34,...
    'Parent',h32,...
    'Units','data',...
    'FontUnits','points',...
    'BackgroundColor','none',...
    'Color',[0 0 0],...
    'DisplayName',blanks(0),...
    'EdgeColor','none',...
    'EraseMode','normal',...
    'FontAngle','normal',...
    'FontName','Helvetica',...
    'FontSize',10,...
    'FontWeight','normal',...
    'HorizontalAlignment','center',...
    'LineStyle','-',...
    'LineWidth',0.5,...
    'Margin',2,...
    'Position',[0.499301675977654 -0.0785953177257526 1.00005459937205],...
    'Rotation',0,...
    'String',blanks(0),...
    'Interpreter','none',...
    'VerticalAlignment','top',...
    'ButtonDownFcn',[],...
    'CreateFcn', {@local_CreateFcn, [], ''} ,...
    'DeleteFcn',[],...
    'BusyAction','queue',...
    'HandleVisibility','off',...
    'HitTest','on',...
    'Interruptible','on',...
    'SelectionHighlight','on',...
    'Tag',blanks(0),...
    'UserData',[],...
    'Visible','off',...
    'XLimInclude','on',...
    'YLimInclude','on',...
    'ZLimInclude','on',...
    'Clipping','off');

    h35 = get(h32,'ylabel');

    set(h35,...
    'Parent',h32,...
    'Units','data',...
    'FontUnits','points',...
    'BackgroundColor','none',...
    'Color',[0 0 0],...
    'DisplayName',blanks(0),...
    'EdgeColor','none',...
    'EraseMode','normal',...
    'FontAngle','normal',...
    'FontName','Helvetica',...
    'FontSize',10,...
    'FontWeight','normal',...
    'HorizontalAlignment','center',...
    'LineStyle','-',...
    'LineWidth',0.5,...
    'Margin',2,...
    'Position',[-0.039804469273743 0.496655518394649 1.00005459937205],...
    'Rotation',90,...
    'String',blanks(0),...
    'Interpreter','none',...
    'VerticalAlignment','bottom',...
    'ButtonDownFcn',[],...
    'CreateFcn', {@local_CreateFcn, [], ''} ,...
    'DeleteFcn',[],...
    'BusyAction','queue',...
    'HandleVisibility','off',...
    'HitTest','on',...
    'Interruptible','on',...
    'SelectionHighlight','on',...
    'Tag',blanks(0),...
    'UserData',[],...
    'Visible','off',...
    'XLimInclude','on',...
    'YLimInclude','on',...
    'ZLimInclude','on',...
    'Clipping','off');

    h36 = get(h32,'zlabel');

    set(h36,...
    'Parent',h32,...
    'Units','data',...
    'FontUnits','points',...
    'BackgroundColor','none',...
    'Color',[0 0 0],...
    'DisplayName',blanks(0),...
    'EdgeColor','none',...
    'EraseMode','normal',...
    'FontAngle','normal',...
    'FontName','Helvetica',...
    'FontSize',10,...
    'FontWeight','normal',...
    'HorizontalAlignment','right',...
    'LineStyle','-',...
    'LineWidth',0.5,...
    'Margin',2,...
    'Position',[-0.398743016759777 1.45986622073579 1.00005459937205],...
    'Rotation',0,...
    'String',blanks(0),...
    'Interpreter','none',...
    'VerticalAlignment','middle',...
    'ButtonDownFcn',[],...
    'CreateFcn', {@local_CreateFcn, [], ''} ,...
    'DeleteFcn',[],...
    'BusyAction','queue',...
    'HandleVisibility','off',...
    'HitTest','on',...
    'Interruptible','on',...
    'SelectionHighlight','on',...
    'Tag',blanks(0),...
    'UserData',[],...
    'Visible','off',...
    'XLimInclude','on',...
    'YLimInclude','on',...
    'ZLimInclude','on',...
    'Clipping','off');

    appdata = [];
    appdata.PropertyMetaData = {  {  'DataPropertyDimension' 'DataPropertyConditionedDimension' 'DataPropertySource' 'BackgroundColorPropertyDimension' 'ColumnNameTyped' 'RowNameTyped' } {  [2 2] [2 13] 'ans' [2 3] {  'H2' blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) } {  blanks(0) blanks(0) } } };
    appdata.lastValidTag = 'DiagnosisTable';

    h37 = uitable(...
    'Parent',h31,...
    'Units','characters',...
    'BackgroundColor',[1 1 1;0.94 0.94 0.94],...
    'ColumnFormat',{  [] [] [] [] [] [] [] [] [] [] [] [] },...
    'ColumnEditable', zeros(1,12)==1 ,...
    'ColumnName',{  'H2'; blanks(0); blanks(0); blanks(0); blanks(0); blanks(0); blanks(0); blanks(0); blanks(0); blanks(0); blanks(0); blanks(0) },...
    'ColumnWidth',{  'auto' 'auto' 'auto' 'auto' 'auto' 'auto' 'auto' 'auto' 'auto' 'auto' 'auto' 'auto' },...
    'Data',{  10 30 20 40 blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) },...
    'Position',[5.6 1.84615384615385 150.2 26.1538461538462],...
    'RowName',blanks(0),...
    'UserData',[],...
    'Tag','DiagnosisTable',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'AccuracyTable';
    appdata.PropertyMetaData = {  {  'DataPropertyDimension' 'DataPropertyConditionedDimension' 'DataPropertySource' 'BackgroundColorPropertyDimension' 'ColumnNameTyped' 'RowNameTyped' } {  [7 13] [7 13] 'DataExisting' [2 3] {  'ACT' 'PD' 'D1' 'D2' 'T1' 'T2' 'T3' 'UD' 'NF' 'Accuracy%' blanks(0) blanks(0) blanks(0) } {  'PD' 'D1' 'D2' 'T1' 'T2' 'T3' 'All' } } };

    h38 = uitable(...
    'Parent',h31,...
    'Units','characters',...
    'BackgroundColor',[1 1 1;0.96078431372549 0.96078431372549 0.96078431372549],...
    'ColumnFormat',{  [] [] [] [] [] [] [] [] [] [] [] [] [] },...
    'ColumnEditable',zeros(1,13)==1,...
    'ColumnName',{  'ACT'; 'PD'; 'D1'; 'D2'; 'T1'; 'T2'; 'T3'; 'UD'; 'NF'; 'Accuracy%'; blanks(0); blanks(0); blanks(0) },...
    'ColumnWidth',{  50 50 50 50 50 50 50 50 50 80 'auto' 'auto' 'auto' },...
    'Data',{  0 0 0 0 0 0 0 0 0 7 0 0 0; blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0); blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0); blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0); blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0); blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0); blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) blanks(0) },...
    'Position',[5.6 1.84615384615385 150.2 26.1538461538462],...
    'RowName',{  'PD'; 'D1'; 'D2'; 'T1'; 'T2'; 'T3'; 'All' },...
    'UserData',[],...
    'Tag','AccuracyTable',...
    'Visible','off',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'uipanel9';

    h39 = uibuttongroup(...
    'Parent',h31,...
    'Units','characters',...
    'Title','Results/Analysis View ',...
    'UserData',[],...
    'Clipping','on',...
    'Position',[1.6 29.3076923076923 160.6 6.15384615384616],...
    'Tag','uipanel9',...
    'SelectedObject',[],...
    'SelectionChangeFcn',@(hObject,eventdata)DGALab('uipanel9_SelectionChangeFcn',get(hObject,'SelectedObject'),eventdata,guidata(get(hObject,'SelectedObject'))),...
    'OldSelectedObject',[],...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'RawDataView';

    h40 = uicontrol(...
    'Parent',h39,...
    'Units','characters',...
    'Callback',{@manageButtons; 209.0015869140625+1.63456784214e+301i},...
    'Position',[3.8 2.69230769230769 19.4 1.76923076923077],...
    'String','Raw Data',...
    'Style','radiobutton',...
    'Value',1,...
    'UserData',[],...
    'Tag','RawDataView',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'AccuracyGraphicalView';

    h41 = uicontrol(...
    'Parent',h39,...
    'Units','characters',...
    'Callback',{@manageButtons; 209.0015869140625+1.63456784214e+301i},...
    'Enable','off',...
    'Position',[33.8 2.69230769230769 22.4 1.76923076923077],...
    'String','Accuracy Graph',...
    'Style','radiobutton',...
    'UserData',[],...
    'Tag','AccuracyGraphicalView',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'AccuracyTabularView';

    h42 = uicontrol(...
    'Parent',h39,...
    'Units','characters',...
    'Callback',{@manageButtons; 209.0015869140625+1.63456784214e+301i},...
    'Enable','off',...
    'Position',[70.2 2.69230769230769 21.6 1.76923076923077],...
    'String','Accuracy Table',...
    'Style','radiobutton',...
    'UserData',[],...
    'Tag','AccuracyTabularView',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'selectedMethod';

    h43 = uicontrol(...
    'Parent',h39,...
    'Units','characters',...
    'BackgroundColor',[1 1 1],...
    'Callback',@(hObject,eventdata)DGALab('selectedMethod_Callback',hObject,eventdata,guidata(hObject)),...
    'Position',[70.2 0.538461538461539 37.4 1.76923076923077],...
    'String','Selected Methods',...
    'Style','popupmenu',...
    'TooltipString','Selet the method to view its accuracy analysis table',...
    'Value',1,...
    'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)SetDefaultBackgroundColor(hObject), appdata} ,...
    'UserData',[],...
    'Tag','selectedMethod');

    appdata = [];
    appdata.lastValidTag = 'pbExportView';

    h44 = uicontrol(...
    'Parent',h39,...
    'Units','characters',...
    'Callback',@(hObject, eventData)DGALab('ExportCurrentView',guidata(hObject)),...
    'Position',[117.6 1.30769230769231 40.8 3.07692307692308],...
    'String','Export the table or graph view currently visible',...
    'TooltipString','Export the displayed results to a file',...
    'Tag','pbExportView',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'InputModeGroup';

    h45 = uibuttongroup(...
    'Parent',h1,...
    'Units','characters',...
    'Title','Input Mode',...
    'Clipping','on',...
    'Position',[2 19.6153846153846 40.5 4],...
    'Tag','InputModeGroup',...
    'SelectedObject',[],...
    'SelectionChangeFcn',@(hObject,eventdata)DGALab('InputModeGroup_SelectionChangeFcn',get(hObject,'SelectedObject'),eventdata,guidata(get(hObject,'SelectedObject'))),...
    'OldSelectedObject',[],...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'optSinglePoint';

    h46 = uicontrol(...
    'Parent',h45,...
    'Units','characters',...
    'Callback',{@manageButtons; 215.0015869140625+1.63456784214e+301i},...
    'Position',[2.2 0.846153846153846 17.4 1.76923076923077],...
    'String','Single Point',...
    'Style','radiobutton',...
    'TooltipString','Diagnose a single case',...
    'Tag','optSinglePoint',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

    appdata = [];
    appdata.lastValidTag = 'optDataset';

    h47 = uicontrol(...
    'Parent',h45,...
    'Units','characters',...
    'Callback',{@manageButtons; 215.0015869140625+1.63456784214e+301i},...
    'Position',[20.2 0.846153846153846 17.4 1.76923076923077],...
    'String','Dataset',...
    'Style','radiobutton',...
    'TooltipString','Apply the selected DGA methods to a set of cases and analyze the results',...
    'Value',1,...
    'Tag','optDataset',...
    'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );


    hsingleton = h1;
end

% --- Set application data first then calling the CreateFcn. 
function local_CreateFcn(hObject, eventdata, createfcn, appdata)

    if ~isempty(appdata)
       names = fieldnames(appdata);
       for i=1:length(names)
           name = char(names(i));
           setappdata(hObject, name, getfield(appdata,name));
       end
    end

    if ~isempty(createfcn)
       if isa(createfcn,'function_handle')
           createfcn(hObject, eventdata);
       else
           eval(createfcn);
       end
    end
end

% --- Handles default GUIDE GUI creation and callback dispatch
function varargout = gui_mainfcn(gui_State, varargin)

    gui_StateFields =  {'gui_Name'
        'gui_Singleton'
        'gui_OpeningFcn'
        'gui_OutputFcn'
        'gui_LayoutFcn'
        'gui_Callback'};
    gui_Mfile = '';
    for i=1:length(gui_StateFields)
        if ~isfield(gui_State, gui_StateFields{i})
            error(message('MATLAB:guide:StateFieldNotFound', gui_StateFields{ i }, gui_Mfile));
        elseif isequal(gui_StateFields{i}, 'gui_Name')
            gui_Mfile = [gui_State.(gui_StateFields{i}), '.m'];
        end
    end

    numargin = length(varargin);

    if numargin == 0
        % DGALAB
        % create the GUI only if we are not in the process of loading it
        % already
        gui_Create = true;
    elseif local_isInvokeActiveXCallback(gui_State, varargin{:})
        % DGALAB(ACTIVEX,...)
        vin{1} = gui_State.gui_Name;
        vin{2} = [get(varargin{1}.Peer, 'Tag'), '_', varargin{end}];
        vin{3} = varargin{1};
        vin{4} = varargin{end-1};
        vin{5} = guidata(varargin{1}.Peer);
        feval(vin{:});
        return;
    elseif local_isInvokeHGCallback(gui_State, varargin{:})
        % DGALAB('CALLBACK',hObject,eventData,handles,...)
        gui_Create = false;
    else
        % DGALAB(...)
        % create the GUI and hand varargin to the openingfcn
        gui_Create = true;
    end

    if ~gui_Create
        % In design time, we need to mark all components possibly created in
        % the coming callback evaluation as non-serializable. This way, they
        % will not be brought into GUIDE and not be saved in the figure file
        % when running/saving the GUI from GUIDE.
        designEval = false;
        if (numargin>1 && ishghandle(varargin{2}))
            fig = varargin{2};
            while ~isempty(fig) && ~ishghandle(fig,'figure')
                fig = get(fig,'parent');
            end

            designEval = isappdata(0,'CreatingGUIDEFigure') || (isscalar(fig)&&isprop(fig,'GUIDEFigure'));
        end

        if designEval
            beforeChildren = findall(fig);
        end

        % evaluate the callback now
        varargin{1} = gui_State.gui_Callback;
        if nargout
            [varargout{1:nargout}] = feval(varargin{:});
        else       
            feval(varargin{:});
        end

        % Set serializable of objects created in the above callback to off in
        % design time. Need to check whether figure handle is still valid in
        % case the figure is deleted during the callback dispatching.
        if designEval && ishghandle(fig)
            set(setdiff(findall(fig),beforeChildren), 'Serializable','off');
        end
    else
        if gui_State.gui_Singleton
            gui_SingletonOpt = 'reuse';
        else
            gui_SingletonOpt = 'new';
        end

        % Check user passing 'visible' P/V pair first so that its value can be
        % used by oepnfig to prevent flickering
        gui_Visible = 'auto';
        gui_VisibleInput = '';
        for index=1:2:length(varargin)
            if length(varargin) == index || ~ischar(varargin{index})
                break;
            end

            % Recognize 'visible' P/V pair
            len1 = min(length('visible'),length(varargin{index}));
            len2 = min(length('off'),length(varargin{index+1}));
            if ischar(varargin{index+1}) && strncmpi(varargin{index},'visible',len1) && len2 > 1
                if strncmpi(varargin{index+1},'off',len2)
                    gui_Visible = 'invisible';
                    gui_VisibleInput = 'off';
                elseif strncmpi(varargin{index+1},'on',len2)
                    gui_Visible = 'visible';
                    gui_VisibleInput = 'on';
                end
            end
        end

        % Open fig file with stored settings.  Note: This executes all component
        % specific CreateFunctions with an empty HANDLES structure.


        % Do feval on layout code in m-file if it exists
        gui_Exported = ~isempty(gui_State.gui_LayoutFcn);
        % this application data is used to indicate the running mode of a GUIDE
        % GUI to distinguish it from the design mode of the GUI in GUIDE. it is
        % only used by actxproxy at this time.   
        setappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]),1);
        if gui_Exported
            gui_hFigure = feval(gui_State.gui_LayoutFcn, gui_SingletonOpt);

            % make figure invisible here so that the visibility of figure is
            % consistent in OpeningFcn in the exported GUI case
            if isempty(gui_VisibleInput)
                gui_VisibleInput = get(gui_hFigure,'Visible');
            end
            set(gui_hFigure,'Visible','off')

            % openfig (called by local_openfig below) does this for guis without
            % the LayoutFcn. Be sure to do it here so guis show up on screen.
            movegui(gui_hFigure,'onscreen');
        else
            gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
            % If the figure has InGUIInitialization it was not completely created
            % on the last pass.  Delete this handle and try again.
            if isappdata(gui_hFigure, 'InGUIInitialization')
                delete(gui_hFigure);
                gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
            end
        end
        if isappdata(0, genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]))
            rmappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]));
        end

        % Set flag to indicate starting GUI initialization
        setappdata(gui_hFigure,'InGUIInitialization',1);

        % Fetch GUIDE Application options
        gui_Options = getappdata(gui_hFigure,'GUIDEOptions');
        % Singleton setting in the GUI M-file takes priority if different
        gui_Options.singleton = gui_State.gui_Singleton;

        if ~isappdata(gui_hFigure,'GUIOnScreen')
            % Adjust background color
            if gui_Options.syscolorfig
                set(gui_hFigure,'Color', get(0,'DefaultUicontrolBackgroundColor'));
            end

            % Generate HANDLES structure and store with GUIDATA. If there is
            % user set GUI data already, keep that also.
            data = guidata(gui_hFigure);
            handles = guihandles(gui_hFigure);
            if ~isempty(handles)
                if isempty(data)
                    data = handles;
                else
                    names = fieldnames(handles);
                    for k=1:length(names)
                        data.(char(names(k)))=handles.(char(names(k)));
                    end
                end
            end
            guidata(gui_hFigure, data);
        end

        % Apply input P/V pairs other than 'visible'
        for index=1:2:length(varargin)
            if length(varargin) == index || ~ischar(varargin{index})
                break;
            end

            len1 = min(length('visible'),length(varargin{index}));
            if ~strncmpi(varargin{index},'visible',len1)
                try set(gui_hFigure, varargin{index}, varargin{index+1}), catch break, end
            end
        end

        % If handle visibility is set to 'callback', turn it on until finished
        % with OpeningFcn
        gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
        if strcmp(gui_HandleVisibility, 'callback')
            set(gui_hFigure,'HandleVisibility', 'on');
        end

        feval(gui_State.gui_OpeningFcn, gui_hFigure, [], guidata(gui_hFigure), varargin{:});

        if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
            % Handle the default callbacks of predefined toolbar tools in this
            % GUI, if any
            guidemfile('restoreToolbarToolPredefinedCallback',gui_hFigure); 

            % Update handle visibility
            set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);

            % Call openfig again to pick up the saved visibility or apply the
            % one passed in from the P/V pairs
            if ~gui_Exported
                gui_hFigure = local_openfig(gui_State.gui_Name, 'reuse',gui_Visible);
            elseif ~isempty(gui_VisibleInput)
                set(gui_hFigure,'Visible',gui_VisibleInput);
            end
            if strcmpi(get(gui_hFigure, 'Visible'), 'on')
                figure(gui_hFigure);

                if gui_Options.singleton
                    setappdata(gui_hFigure,'GUIOnScreen', 1);
                end
            end

            % Done with GUI initialization
            if isappdata(gui_hFigure,'InGUIInitialization')
                rmappdata(gui_hFigure,'InGUIInitialization');
            end

            % If handle visibility is set to 'callback', turn it on until
            % finished with OutputFcn
            gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
            if strcmp(gui_HandleVisibility, 'callback')
                set(gui_hFigure,'HandleVisibility', 'on');
            end
            gui_Handles = guidata(gui_hFigure);
        else
            gui_Handles = [];
        end

        if nargout
            [varargout{1:nargout}] = feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
        else
            feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
        end

        if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
            set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);
        end
    end
end
function gui_hFigure = local_openfig(name, singleton, visible)

    % openfig with three arguments was new from R13. Try to call that first, if
    % failed, try the old openfig.
    if nargin('openfig') == 2
        % OPENFIG did not accept 3rd input argument until R13,
        % toggle default figure visible to prevent the figure
        % from showing up too soon.
        gui_OldDefaultVisible = get(0,'defaultFigureVisible');
        set(0,'defaultFigureVisible','off');
        gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton);
        set(0,'defaultFigureVisible',gui_OldDefaultVisible);
    else
        % Call version of openfig that accepts 'auto' option"
        gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton, visible);  
        %workaround for CreateFcn not called to create ActiveX
        if feature('HGUsingMATLABClasses')
            peers=findobj(findall(allchild(gui_hFigure)),'type','uicontrol','style','text');    
            for i=1:length(peers)
                if isappdata(peers(i),'Control')
                    actxproxy(peers(i));
                end            
            end
        end
    end
end

function result = local_isInvokeActiveXCallback(gui_State, varargin)

    try
        result = ispc && iscom(varargin{1}) ...
                 && isequal(varargin{1},gcbo);
    catch
        result = false;
    end
end

function result = local_isInvokeHGCallback(gui_State, varargin)

    try
        fhandle = functions(gui_State.gui_Callback);
        result = ~isempty(findstr(gui_State.gui_Name,fhandle.file)) || ...
                 (ischar(varargin{1}) ...
                 && isequal(ishghandle(varargin{2}), 1) ...
                 && (~isempty(strfind(varargin{1},[get(varargin{2}, 'Tag'), '_'])) || ...
                    ~isempty(strfind(varargin{1}, '_CreateFcn'))) );
    catch
        result = false;
    end
end

